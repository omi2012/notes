To enable sending real emails put this into the aplication.conf

play.mailer {
  host=smtp.gmail.com
  port=465
  user="your@gmail.com"
  password=yourpassword
  ssl=true
  from="your@gmail.com"
  mock=false
}


-------
Check if user is logged in.

@if(loggedUser.isDefined) {
						<th>@Messages("index.table.allowed")</th>
					}
------

USer status.
@loggedUser.map { user =>
			<p class="lead">@Html(Messages("index.auth.status", s"""<span class="text-success">${user.fullName}</span>""", s"""<span class="text-info">${servicesString(user)}</span>"""))</p>
		}


------
Checkmark or X mark......

@loggedUser.map { implicit user =>
						@withServiceOrElse("serviceA") {
							<span class="glyphicon glyphicon-ok"></span>
						}{
							<span class="glyphicon glyphicon-remove"></span>
						}
				}

----------------

Bootstrap table

	<table class="table table-striped table-hover">
		  <thead>
		    <tr>
		      <th>@Messages("index.table.section")</th>
		      <th>@Messages("index.table.authobject")</th>
		      <th>@Messages("index.table.services")</th>
					@if(loggedUser.isDefined) {
						<th>@Messages("index.table.allowed")</th>
					}
		      <th>@Messages("index.table.go")</th>
		    </tr>
		  </thead>
		  <tbody>
			<tr>

------

Bootstrap show a list 
@b3.select(signUpForm("services"), options = 
	User.services.map(s => (s, s)), 
			'_label -> "Select the services you have an account", 
			'multiple -> true )




authenticator

def authenticate = Action.async { implicit request =>
    SignInForm.form.bindFromRequest.fold(
      form => Future.successful(BadRequest(views.html.signIn(form))),
      data => {
        val credentials = Credentials(data.email, data.password)
        credentialsProvider.authenticate(credentials).flatMap { loginInfo =>
          val result = Redirect(routes.ApplicationController.index())
          userService.retrieve(loginInfo).flatMap {
            case Some(user) =>
              val c = configuration.underlying
              env.authenticatorService.create(loginInfo).map {
                case authenticator if data.rememberMe =>
                  authenticator.copy(
                    expirationDateTime = clock.now + c.as[FiniteDuration]("silhouette.authenticator.rememberMe.authenticatorExpiry"),
                    idleTimeout = c.getAs[FiniteDuration]("silhouette.authenticator.rememberMe.authenticatorIdleTimeout"),
                    cookieMaxAge = c.getAs[FiniteDuration]("silhouette.authenticator.rememberMe.cookieMaxAge")
                  )
                case authenticator => authenticator
              }.flatMap { authenticator =>
                env.eventBus.publish(LoginEvent(user, request, request2Messages))
                env.authenticatorService.init(authenticator).flatMap { v =>
                  env.authenticatorService.embed(v, result)
                }
              }
            case None => Future.failed(new IdentityNotFoundException("Couldn't find user"))
          }
        }.recover {
          case e: ProviderException =>
            Redirect(routes.ApplicationController.signIn()).flashing("error" -> Messages("invalid.credentials"))
        }
      }
    )
  }
